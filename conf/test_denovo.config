/*
 * -------------------------------------------------
 *  Nextflow config file for running tests
 * -------------------------------------------------
 * Defines bundled input files and everything required
 * to run a fast and simple test. Use as follows:
 *   nextflow run gongyh/nf-core-scgs -profile test
 */

params {
  // Limit resources so that this can run on Travis
  max_cpus = 2
  max_memory = 4.GB
  max_time = 1.h
  // Input data
  // TODO nf-core: Specify the paths to your test data on nf-core/test-datasets
  // TODO nf-core: Give any required params for the test so that command line flags are not needed
  singleEnd = false
  readPaths = [
    ['E1', ["$baseDir/test-datasets/E1.1.fastq.gz", "$baseDir/test-datasets/E1.2.fastq.gz"]],
    ['E2', ["$baseDir/test-datasets/E2.1.fastq.gz", "$baseDir/test-datasets/E2.2.fastq.gz"]],
    ['E3', ["$baseDir/test-datasets/E3.1.fastq.gz", "$baseDir/test-datasets/E3.2.fastq.gz"]]
  ]
  saveTrimmed = true
  saveAlignedIntermediates = true
}

process {

  cpus = { check_max( 1 * task.attempt, 'cpus' ) }
  memory = { check_max( 3.GB * task.attempt, 'memory' ) }
  time = { check_max( 1.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'terminate' }
  maxRetries = 1
  maxErrors = '-1'

  // Environment modules and resource requirements
  withName: trim_galore {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 3.GB * task.attempt, 'memory' ) }
    time = { check_max( 1.h * task.attempt, 'time' ) }
  }
  withName: kraken {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 3.GB * task.attempt, 'memory' ) }
    time = { check_max( 1.h * task.attempt, 'time' ) }
  }
  withName: bowtie2 {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 3.GB * task.attempt, 'memory' ) }
    time = { check_max( 1.h * task.attempt, 'time' ) }
  }
  withName: samtools {
    cpus = { check_max( 1 * task.attempt, 'cpus' ) }
    memory = { check_max( 2.GB * task.attempt, 'memory' ) }
    time = { check_max( 1.h * task.attempt, 'time' ) }
  }
  withName: IndelRealign { 
    cpus = { check_max( 1 * task.attempt, 'cpus' ) }
    memory = { check_max( 2.GB * task.attempt, 'memory' ) }
    time = { check_max( 1.h * task.attempt, 'time' ) }
  }
  withName: monovar {
    cpus = { check_max( 1 * task.attempt, 'cpus' ) }
    memory = { check_max( 3.GB * task.attempt, 'memory' ) }
    time = { check_max( 1.h * task.attempt, 'time' ) }
  }
  withName: aneufinder {
    cpus = { check_max( 1 * task.attempt, 'cpus' ) }
    memory = { check_max( 3.GB * task.attempt, 'memory' ) }
    time = { check_max( 1.h * task.attempt, 'time' ) }
  }
  withName: spades {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 3.GB * task.attempt, 'memory' ) }
    time = { check_max( 1.h * task.attempt, 'time' ) }
  }
  withName: blast_nt {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 3.GB * task.attempt, 'memory' ) }
    time = { check_max( 1.h * task.attempt, 'time' ) }
  }
  withName: checkm {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 3.GB * task.attempt, 'memory' ) }
    time = { check_max( 1.h * task.attempt, 'time' ) } 
  }
  withName: quast_denovo {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 3.GB * task.attempt, 'memory' ) }
    time = { check_max( 1.h * task.attempt, 'time' ) }
  }
  withName: get_software_versions {
    memory = { check_max( 1.GB * task.attempt, 'memory' ) }
    errorStrategy = 'ignore'
  }
  withName: multiqc_denovo {
    memory = { check_max( 2.GB * task.attempt, 'memory' ) }
  }
}
